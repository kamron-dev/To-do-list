(()=>{"use strict";const t=(t,e,n,o="important",c=!1)=>({id:Date.now(),title:t,desc:e,dueDate:n,priority:o,completed:c}),e="very important",n={default:[],home:[],work:[]},o=(t,e="default")=>(n[e].push(t),n),c=t("Milk","Buy some milk for the cat","Some day",e),i=t("Writing","Write some text to my book","Today","not important",!0),a=t("Buy cat food","Buy some kitekat","Today",e);var d;o(c),o(i),o(a),console.table(n.home),console.table(n.default),console.log(n),function(t){const e=document.getElementById("main"),n=document.createElement("h1");n.textContent="Lika i Ya",n.setAttribute("id","mainHeader"),e.appendChild(n)}(),function(){const t=document.getElementById("main"),e=document.createElement("div");e.setAttribute("id","mainDiv"),t.appendChild(e)}(),function(t){const e=document.querySelector("#projects-div"),n=Object.keys(t);e.innerHTML="",n.forEach((t=>{const n=document.createElement("button");n.classList.add("projects-list-button"),n.textContent=t,e.appendChild(n)}))}(n),d=n,document.querySelectorAll(".projects-list-button").forEach((t=>{t.addEventListener("click",(()=>{mainHeader.textContent=t.textContent,console.log(d[t.textContent]);const e=document.createElement("ul");d[t.textContent].forEach((t=>{const n=document.createElement("li");Object.keys(t).forEach((e=>{if("desc"===e){const o=document.createElement("p");o.innerHTML=t[e],n.appendChild(o)}})),e.appendChild(n)})),mainDiv.innerHTML="",mainDiv.appendChild(e)}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,