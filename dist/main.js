(()=>{"use strict";var t={d:(e,n)=>{for(var o in n)t.o(n,o)&&!t.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:n[o]})},o:(t,e)=>Object.prototype.hasOwnProperty.call(t,e),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Hv:()=>a,QN:()=>r,ix:()=>n});const n=(t,e,n,o="important",r=!1)=>({id:Date.now(),title:t,desc:e,dueDate:n,priority:o,completed:r});let o={Default:[],Home:[],Work:[]};const r=(t,e="Default")=>(o[e].push(t),o),a=t=>(o[t]=[],o);function i(t){const e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new t.constructor(+t):"number"==typeof t||"[object Number]"===e||"string"==typeof t||"[object String]"===e?new Date(t):new Date(NaN)}function u(t){if(!(e=t,e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)||"number"==typeof t))return!1;var e;const n=i(t);return!isNaN(Number(n))}const c={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function s(t){return(e={})=>{const n=e.width?String(e.width):t.defaultWidth;return t.formats[n]||t.formats[t.defaultWidth]}}const d={date:s({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:s({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:s({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},l={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function m(t){return(e,n)=>{let o;if("formatting"===(n?.context?String(n.context):"standalone")&&t.formattingValues){const e=t.defaultFormattingWidth||t.defaultWidth,r=n?.width?String(n.width):e;o=t.formattingValues[r]||t.formattingValues[e]}else{const e=t.defaultWidth,r=n?.width?String(n.width):t.defaultWidth;o=t.values[r]||t.values[e]}return o[t.argumentCallback?t.argumentCallback(e):e]}}function h(t){return(e,n={})=>{const o=n.width,r=o&&t.matchPatterns[o]||t.matchPatterns[t.defaultMatchWidth],a=e.match(r);if(!a)return null;const i=a[0],u=o&&t.parsePatterns[o]||t.parsePatterns[t.defaultParseWidth],c=Array.isArray(u)?function(t,e){for(let e=0;e<t.length;e++)if(t[e].test(i))return e}(u):function(t,e){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e)&&t[e].test(i))return e}(u);let s;return s=t.valueCallback?t.valueCallback(c):c,s=n.valueCallback?n.valueCallback(s):s,{value:s,rest:e.slice(i.length)}}}var f;const g={code:"en-US",formatDistance:(t,e,n)=>{let o;const r=c[t];return o="string"==typeof r?r:1===e?r.one:r.other.replace("{{count}}",e.toString()),n?.addSuffix?n.comparison&&n.comparison>0?"in "+o:o+" ago":o},formatLong:d,formatRelative:(t,e,n,o)=>l[t],localize:{ordinalNumber:(t,e)=>{const n=Number(t),o=n%100;if(o>20||o<10)switch(o%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:m({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:m({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:t=>t-1}),month:m({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:m({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:m({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(f={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:t=>parseInt(t,10)},(t,e={})=>{const n=t.match(f.matchPattern);if(!n)return null;const o=n[0],r=t.match(f.parsePattern);if(!r)return null;let a=f.valueCallback?f.valueCallback(r[0]):r[0];return a=e.valueCallback?e.valueCallback(a):a,{value:a,rest:t.slice(o.length)}}),era:h({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:h({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:t=>t+1}),month:h({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:h({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:h({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};let p={};function y(){return p}Math.pow(10,8);const b=6048e5,w=864e5;function v(t){const e=i(t);return e.setHours(0,0,0,0),e}function M(t){const e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function x(t,e){return t instanceof Date?new t.constructor(e):new Date(e)}function D(t){const e=i(t);return function(t,e){const n=v(t),o=v(e),r=n.getTime()-M(n),a=o.getTime()-M(o);return Math.round((r-a)/w)}(e,function(t){const e=i(t),n=x(t,0);return n.setFullYear(e.getFullYear(),0,1),n.setHours(0,0,0,0),n}(e))+1}function k(t,e){const n=y(),o=e?.weekStartsOn??e?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,r=i(t),a=r.getDay(),u=(a<o?7:0)+a-o;return r.setDate(r.getDate()-u),r.setHours(0,0,0,0),r}function C(t){return k(t,{weekStartsOn:1})}function S(t){const e=i(t),n=e.getFullYear(),o=x(t,0);o.setFullYear(n+1,0,4),o.setHours(0,0,0,0);const r=C(o),a=x(t,0);a.setFullYear(n,0,4),a.setHours(0,0,0,0);const u=C(a);return e.getTime()>=r.getTime()?n+1:e.getTime()>=u.getTime()?n:n-1}function E(t){const e=i(t),n=C(e).getTime()-function(t){const e=S(t),n=x(t,0);return n.setFullYear(e,0,4),n.setHours(0,0,0,0),C(n)}(e).getTime();return Math.round(n/b)+1}function T(t,e){const n=i(t),o=n.getFullYear(),r=y(),a=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??r.firstWeekContainsDate??r.locale?.options?.firstWeekContainsDate??1,u=x(t,0);u.setFullYear(o+1,0,a),u.setHours(0,0,0,0);const c=k(u,e),s=x(t,0);s.setFullYear(o,0,a),s.setHours(0,0,0,0);const d=k(s,e);return n.getTime()>=c.getTime()?o+1:n.getTime()>=d.getTime()?o:o-1}function P(t,e){const n=i(t),o=k(n,e).getTime()-function(t,e){const n=y(),o=e?.firstWeekContainsDate??e?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,r=T(t,e),a=x(t,0);return a.setFullYear(r,0,o),a.setHours(0,0,0,0),k(a,e)}(n,e).getTime();return Math.round(o/b)+1}function W(t,e){return(t<0?"-":"")+Math.abs(t).toString().padStart(e,"0")}const j={y(t,e){const n=t.getFullYear(),o=n>0?n:1-n;return W("yy"===e?o%100:o,e.length)},M(t,e){const n=t.getMonth();return"M"===e?String(n+1):W(n+1,2)},d:(t,e)=>W(t.getDate(),e.length),a(t,e){const n=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(t,e)=>W(t.getHours()%12||12,e.length),H:(t,e)=>W(t.getHours(),e.length),m:(t,e)=>W(t.getMinutes(),e.length),s:(t,e)=>W(t.getSeconds(),e.length),S(t,e){const n=e.length,o=t.getMilliseconds();return W(Math.floor(o*Math.pow(10,n-3)),e.length)}},O={G:function(t,e,n){const o=t.getFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(o,{width:"abbreviated"});case"GGGGG":return n.era(o,{width:"narrow"});default:return n.era(o,{width:"wide"})}},y:function(t,e,n){if("yo"===e){const e=t.getFullYear(),o=e>0?e:1-e;return n.ordinalNumber(o,{unit:"year"})}return j.y(t,e)},Y:function(t,e,n,o){const r=T(t,o),a=r>0?r:1-r;return"YY"===e?W(a%100,2):"Yo"===e?n.ordinalNumber(a,{unit:"year"}):W(a,e.length)},R:function(t,e){return W(S(t),e.length)},u:function(t,e){return W(t.getFullYear(),e.length)},Q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"Q":return String(o);case"QQ":return W(o,2);case"Qo":return n.ordinalNumber(o,{unit:"quarter"});case"QQQ":return n.quarter(o,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(o,{width:"narrow",context:"formatting"});default:return n.quarter(o,{width:"wide",context:"formatting"})}},q:function(t,e,n){const o=Math.ceil((t.getMonth()+1)/3);switch(e){case"q":return String(o);case"qq":return W(o,2);case"qo":return n.ordinalNumber(o,{unit:"quarter"});case"qqq":return n.quarter(o,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(o,{width:"narrow",context:"standalone"});default:return n.quarter(o,{width:"wide",context:"standalone"})}},M:function(t,e,n){const o=t.getMonth();switch(e){case"M":case"MM":return j.M(t,e);case"Mo":return n.ordinalNumber(o+1,{unit:"month"});case"MMM":return n.month(o,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(o,{width:"narrow",context:"formatting"});default:return n.month(o,{width:"wide",context:"formatting"})}},L:function(t,e,n){const o=t.getMonth();switch(e){case"L":return String(o+1);case"LL":return W(o+1,2);case"Lo":return n.ordinalNumber(o+1,{unit:"month"});case"LLL":return n.month(o,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(o,{width:"narrow",context:"standalone"});default:return n.month(o,{width:"wide",context:"standalone"})}},w:function(t,e,n,o){const r=P(t,o);return"wo"===e?n.ordinalNumber(r,{unit:"week"}):W(r,e.length)},I:function(t,e,n){const o=E(t);return"Io"===e?n.ordinalNumber(o,{unit:"week"}):W(o,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getDate(),{unit:"date"}):j.d(t,e)},D:function(t,e,n){const o=D(t);return"Do"===e?n.ordinalNumber(o,{unit:"dayOfYear"}):W(o,e.length)},E:function(t,e,n){const o=t.getDay();switch(e){case"E":case"EE":case"EEE":return n.day(o,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(o,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},e:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"e":return String(a);case"ee":return W(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(r,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(r,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},c:function(t,e,n,o){const r=t.getDay(),a=(r-o.weekStartsOn+8)%7||7;switch(e){case"c":return String(a);case"cc":return W(a,e.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(r,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(r,{width:"narrow",context:"standalone"});case"cccccc":return n.day(r,{width:"short",context:"standalone"});default:return n.day(r,{width:"wide",context:"standalone"})}},i:function(t,e,n){const o=t.getDay(),r=0===o?7:o;switch(e){case"i":return String(r);case"ii":return W(r,e.length);case"io":return n.ordinalNumber(r,{unit:"day"});case"iii":return n.day(o,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(o,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(o,{width:"short",context:"formatting"});default:return n.day(o,{width:"wide",context:"formatting"})}},a:function(t,e,n){const o=t.getHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(o,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(o,{width:"narrow",context:"formatting"});default:return n.dayPeriod(o,{width:"wide",context:"formatting"})}},b:function(t,e,n){const o=t.getHours();let r;switch(r=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){const o=t.getHours();let r;switch(r=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){let e=t.getHours()%12;return 0===e&&(e=12),n.ordinalNumber(e,{unit:"hour"})}return j.h(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getHours(),{unit:"hour"}):j.H(t,e)},K:function(t,e,n){const o=t.getHours()%12;return"Ko"===e?n.ordinalNumber(o,{unit:"hour"}):W(o,e.length)},k:function(t,e,n){let o=t.getHours();return 0===o&&(o=24),"ko"===e?n.ordinalNumber(o,{unit:"hour"}):W(o,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getMinutes(),{unit:"minute"}):j.m(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getSeconds(),{unit:"second"}):j.s(t,e)},S:function(t,e){return j.S(t,e)},X:function(t,e,n,o){const r=(o._originalDate||t).getTimezoneOffset();if(0===r)return"Z";switch(e){case"X":return B(r);case"XXXX":case"XX":return L(r);default:return L(r,":")}},x:function(t,e,n,o){const r=(o._originalDate||t).getTimezoneOffset();switch(e){case"x":return B(r);case"xxxx":case"xx":return L(r);default:return L(r,":")}},O:function(t,e,n,o){const r=(o._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+N(r,":");default:return"GMT"+L(r,":")}},z:function(t,e,n,o){const r=(o._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+N(r,":");default:return"GMT"+L(r,":")}},t:function(t,e,n,o){const r=o._originalDate||t;return W(Math.floor(r.getTime()/1e3),e.length)},T:function(t,e,n,o){return W((o._originalDate||t).getTime(),e.length)}};function N(t,e=""){const n=t>0?"-":"+",o=Math.abs(t),r=Math.floor(o/60),a=o%60;return 0===a?n+String(r):n+String(r)+e+W(a,2)}function B(t,e){return t%60==0?(t>0?"-":"+")+W(Math.abs(t)/60,2):L(t,e)}function L(t,e=""){const n=t>0?"-":"+",o=Math.abs(t);return n+W(Math.floor(o/60),2)+e+W(o%60,2)}const Y=(t,e)=>{switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}},q=(t,e)=>{switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}},H={p:q,P:(t,e)=>{const n=t.match(/(P+)(p+)?/)||[],o=n[1],r=n[2];if(!r)return Y(t,e);let a;switch(o){case"P":a=e.dateTime({width:"short"});break;case"PP":a=e.dateTime({width:"medium"});break;case"PPP":a=e.dateTime({width:"long"});break;default:a=e.dateTime({width:"full"})}return a.replace("{{date}}",Y(o,e)).replace("{{time}}",q(r,e))}},I=/^D+$/,A=/^Y+$/,F=["D","DD","YY","YYYY"];function z(t,e,n){const o=function(t,e,n){const o="Y"===t[0]?"years":"days of the month";return`Use \`${t.toLowerCase()}\` instead of \`${t}\` (in \`${e}\`) for formatting ${o} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(t,e,n);if(console.warn(o),F.includes(t))throw new RangeError(o)}const Q=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,G=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,X=/^'([^]*?)'?$/,J=/''/g,$=/[a-zA-Z]/;function _(t,e,n){const o=y(),r=n?.locale??o.locale??g,a=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??o.firstWeekContainsDate??o.locale?.options?.firstWeekContainsDate??1,c=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,s=i(t);if(!u(s))throw new RangeError("Invalid time value");const d={firstWeekContainsDate:a,weekStartsOn:c,locale:r,_originalDate:s};return e.match(G).map((function(t){const e=t[0];return"p"===e||"P"===e?(0,H[e])(t,r.formatLong):t})).join("").match(Q).map((function(o){if("''"===o)return"'";const a=o[0];if("'"===a)return function(t){const e=t.match(X);return e?e[1].replace(J,"'"):t}(o);const i=O[a];if(i)return!n?.useAdditionalWeekYearTokens&&(u=o,A.test(u))&&z(o,e,String(t)),!n?.useAdditionalDayOfYearTokens&&function(t){return I.test(t)}(o)&&z(o,e,String(t)),i(s,o,r.localize,d);var u;if(a.match($))throw new RangeError("Format string contains an unescaped latin alphabet character `"+a+"`");return o})).join("")}function R(t,e){const{years:n=0,months:o=0,weeks:r=0,days:a=0,hours:u=0,minutes:c=0,seconds:s=0}=e,d=i(t),l=o||n?function(t,e){const n=i(t);if(isNaN(e))return x(t,NaN);if(!e)return n;const o=n.getDate(),r=x(t,n.getTime());return r.setMonth(n.getMonth()+e+1,0),o>=r.getDate()?r:(n.setFullYear(r.getFullYear(),r.getMonth(),o),n)}(d,o+12*n):d,m=1e3*(s+60*(c+60*u));return x(t,(a||r?function(t,e){const n=i(t);return isNaN(e)?x(t,NaN):e?(n.setDate(n.getDate()+e),n):n}(l,a+7*r):l).getTime()+m)}function U(t){for(const e in t)localStorage.setItem(e,JSON.stringify(t[e]))}function V(t){const e=document.querySelector("#projects-div"),n=Object.keys(t);e.innerHTML="";const o=document.createElement("h3");return o.textContent="Projects",e.appendChild(o),n.forEach((t=>{const n=document.createElement("button");n.classList.add("projects-list-button"),n.textContent=t,e.appendChild(n)})),function(t,e){const n=document.querySelector("#projects-div"),o=document.createElement("button");o.textContent="New project +",o.setAttribute("id","add-new-project-btn"),n.appendChild(o),o.addEventListener("click",(()=>{const t=document.createElement("form");t.classList.add("input-field"),t.setAttribute("id","input-field"),n.appendChild(t),Z("input-field","input",{type:"text",id:"project-input","max-length":"24",placeholder:"Enter project name",autocomplete:"off"}),Z("input-field","button",{type:"button",id:"add-project-btn"}).textContent="Add",Z("input-field","button",{type:"button",id:"cancel-add-project-btn"}).textContent="Cancel",o.setAttribute("disabled",!0),function(t){const e=document.getElementById("add-project-btn"),n=document.querySelector("#cancel-add-project-btn");e.addEventListener("click",(()=>{const e=document.getElementById("project-input").value;a(e),U(t),V(t),K(t)})),n.addEventListener("click",(()=>{const t=document.querySelector(".input-field"),e=document.querySelector("#add-new-project-btn");t&&t.remove(),e.removeAttribute("disabled")}))}(e)}))}(0,t),e}function K(t){const e=document.querySelectorAll(".projects-list-button"),o=document.querySelector("#mainDiv"),a=document.getElementById("mainHeader");e.forEach((e=>{e.addEventListener("click",(()=>{const i=tt(t,e.textContent,null);o.innerHTML="",o.appendChild(i),a.textContent=e.textContent,function(t){const e=document.getElementById("main");if(!document.getElementById("new-ToDo-btn")){const o=document.createElement("button");o.setAttribute("id","new-ToDo-btn"),o.textContent="add",e.appendChild(o),o.addEventListener("click",(()=>{const o=document.createElement("div");o.setAttribute("id","input-Div"),e.appendChild(o),Z("input-Div","form",{id:"input-form"}),Z("input-form","label",{for:"title-input"}).textContent="Title",Z("input-form","input",{type:"text",placeholder:"e.g. Milk",id:"title-input"}),Z("input-form","label",{for:"desc-input"}).textContent="Description",Z("input-form","textarea",{id:"desc-input",placeholder:"e.g. Buy some milk!",rows:"5",required:"true"}),Z("input-form","label",{for:"dueDate"}).textContent="Due date",Z("input-form","input",{type:"date",id:"dueDate"}),Z("input-form","label",{for:"priority"}).textContent="Priority",Z("input-form","select",{id:"priority"}),Z("priority","option",{value:"very-important"}).textContent="Very Important",Z("priority","option",{value:"important"}).textContent="Important",Z("priority","option",{value:"not-important"}).textContent="Not Important",Z("input-form","button",{id:"addToDoBtn",type:"button"}).textContent="Add To-do",Z("input-form","button",{id:"cancelBtn",type:"button"}).textContent="Cancel",function(t){const e=document.getElementById("addToDoBtn"),o=document.getElementById("cancelBtn"),a=document.getElementById("title-input"),i=document.getElementById("desc-input"),u=document.getElementById("dueDate"),c=document.getElementById("priority"),s=document.getElementById("mainHeader"),d=document.getElementById("input-Div");e.addEventListener("click",(()=>{r(n(a.value,i.value,u.value,c.value),s.textContent),U(t),d.remove()})),o.addEventListener("click",(()=>{d.remove()}))}(t)}))}}(t)}))}))}function Z(t,e,n){let o=document.createElement(e);for(let t in n)n.hasOwnProperty(t)&&o.setAttribute(t,n[t]);return document.getElementById(t).appendChild(o),o}function tt(t,e=null,n=null){const o=document.createElement("ul");function r(e){const n=document.createElement("li");n.classList.add("li-element");const r=document.createElement("input");r.setAttribute("type","checkbox"),r.addEventListener("click",(()=>{n.classList.toggle("job-done")})),n.appendChild(r);for(const t in e){if(["title","desc","dueDate"].includes(t)){const o=document.createElement("p");o.textContent=e[t],n.appendChild(o)}e.priority&&n.classList.add(e.priority.toLowerCase()+"-text")}const a=document.createElement("button");a.textContent="Delete",a.addEventListener("click",(()=>{const o=Object.values(t).find((t=>t.includes(e)));if(o){const t=o.indexOf(e);o.splice(t,1),n.remove()}})),n.appendChild(a),o.appendChild(n)}if(e||n){if(e&&!n)t[e]&&t[e].forEach((t=>{r(t)}));else if(!e&&n)for(const e in t)t[e].forEach((t=>{t.dueDate===n&&(r(t),console.log("zzz"))}))}else for(const e in t)t[e].forEach((t=>{r(t)}));return console.log("test2 working!"),o}const et=createToDo("Milk","Buy some milk for the cat","2024-01-30","very-important"),nt=createToDo("Writing","Write some text to my book","2024-01-30","not-important",!0),ot=createToDo("Buy cat food","Buy some kitekat","2024-01-31","very-important");addToDoObj(et),addToDoObj(nt),addToDoObj(ot),function(){if(console.table(e.default),!localStorage.length>0){for(const t in e.default)localStorage.setItem(t,JSON.stringify(e.default[t]));alert("I saved the new data!")}else{let t={};for(let e=0;e<localStorage.length;e++){const n=localStorage.key(e),o=localStorage.getItem(n),r=JSON.parse(o);t[n]=r}e.default=t,alert("I got it from the localStorage!")}Z("to-dos-div","button",{type:"button",id:"all-to-dos"}).textContent="All",Z("to-dos-div","button",{type:"button",id:"today-to-dos"}).textContent="Today",Z("to-dos-div","button",{type:"button",id:"next-week-to-dos"}).textContent="Next week",function(t){const e=document.getElementById("all-to-dos"),n=document.getElementById("today-to-dos"),o=document.getElementById("next-week-to-dos"),r=document.getElementById("mainDiv"),a=document.getElementById("mainHeader");e.addEventListener("click",(()=>{const n=tt(t,null,null);r.innerHTML="",r.appendChild(n),a.textContent=e.textContent;const o=document.getElementById("new-ToDo-btn");o&&o.remove()})),n.addEventListener("click",(()=>{const e=_(Date.now(),"yyyy-MM-dd"),o=tt(t,null,e);r.innerHTML="",r.appendChild(o),a.textContent=n.textContent})),o.addEventListener("click",(()=>{const t=R(_(Date.now(),"yyyy-MM-dd"),{days:7});alert(_(t,"yyyy-MM-dd"))}))}(e.default),V(e.default),K(e.default)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,