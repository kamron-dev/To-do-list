(()=>{"use strict";const t=(t,e,n,o="important",d=!1)=>({id:Date.now(),title:t,desc:e,dueDate:n,priority:o,completed:d}),e={Default:[],Home:[],Work:[]},n=(t,n="Default")=>(e[n].push(t),e);function o(t,e=null,n=null){const o=document.createElement("ul");function d(e){const n=document.createElement("li");n.classList.add("li-element");for(const t in e)if(["title","desc","dueDate"].includes(t)){const o=document.createElement("p");o.textContent=e[t],n.appendChild(o)}const d=document.createElement("button");d.textContent="Delete",d.addEventListener("click",(()=>{const o=Object.values(t).find((t=>t.includes(e)));if(o){const t=o.indexOf(e);o.splice(t,1),n.remove()}})),n.appendChild(d),o.appendChild(n)}if(e||n)e&&!n&&t[e]&&t[e].forEach((t=>{d(t)}));else for(const e in t)t[e].forEach((t=>{d(t)}));return console.log("test2 working!"),o}function d(t){const e=document.querySelectorAll(".projects-list-button"),n=document.querySelector("#mainDiv"),d=document.getElementById("mainHeader");e.forEach((e=>{e.addEventListener("click",(()=>{const c=o(t,e.textContent,null);n.innerHTML="",n.appendChild(c),d.textContent=e.textContent}))}))}function c(t,e,n){let o=document.createElement(e);for(let t in n)n.hasOwnProperty(t)&&o.setAttribute(t,n[t]);return document.getElementById(t).appendChild(o),o}const i=t("Milk","Buy some milk for the cat","12-02-2024","very important"),l=t("Writing","Write some text to my book","14-04-2024","not important",!0),u=t("Buy cat food","Buy some kitekat","04-05-2024","very important");n(i),n(l),n(u),c("to-dos-div","button",{type:"button",id:"all-to-dos"}).textContent="All",c("to-dos-div","button",{type:"button",id:"today-to-dos"}).textContent="Today",c("to-dos-div","button",{type:"button",id:"next-week-to-dos"}).textContent="Next week",function(t){const e=document.getElementById("all-to-dos"),n=(document.getElementById("today-to-dos"),document.getElementById("next-week-to-dos"),document.getElementById("mainDiv")),d=document.getElementById("mainHeader");document.getElementById("new-ToDo-btn"),e.addEventListener("click",(()=>{const c=o(t,null,null);n.innerHTML="",n.appendChild(c),d.textContent=e.textContent}))}(e),function t(n){const o=document.querySelector("#projects-div"),i=Object.keys(n);o.innerHTML="";const l=document.createElement("h3");return l.textContent="Projects",o.appendChild(l),i.forEach((t=>{const e=document.createElement("button");e.classList.add("projects-list-button"),e.textContent=t,o.appendChild(e)})),function(n,o){const i=document.querySelector("#projects-div"),l=document.createElement("button");l.textContent="New project +",l.setAttribute("id","add-new-project-btn"),i.appendChild(l),l.addEventListener("click",(()=>{const n=document.createElement("form");n.classList.add("input-field"),n.setAttribute("id","input-field"),i.appendChild(n),c("input-field","input",{type:"text",id:"project-input","max-length":"24",placeholder:"Enter project name",autocomplete:"off"}),c("input-field","button",{type:"button",id:"add-project-btn"}).textContent="Add",c("input-field","button",{type:"button",id:"cancel-add-project-btn"}).textContent="Cancel",l.setAttribute("disabled",!0),function(n){const o=document.getElementById("add-project-btn"),c=document.querySelector("#cancel-add-project-btn");o.addEventListener("click",(()=>{const o=document.getElementById("project-input").value;e[o]=[],console.table(e),t(n),d(n)})),c.addEventListener("click",(()=>{const t=document.querySelector(".input-field"),e=document.querySelector("#add-new-project-btn");t&&t.remove(),e.removeAttribute("disabled")}))}(o)}))}(0,n),o}(e),d(e)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,