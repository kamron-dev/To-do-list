(()=>{"use strict";const t=(t,e,n,o="important",i=!1)=>({id:Date.now(),title:t,desc:e,dueDate:n,priority:o,completed:i}),e="very important",n={default:[],home:[],work:[]},o=(t,e="default")=>(n[e].push(t),n),i=t("Milk","Buy some milk for the cat","Some day",e),c=t("Writing","Write some text to my book","Today","not important",!0),a=t("Buy cat food","Buy some kitekat","Today",e);o(i),o(c),o(a),console.table(n.home),console.table(n.default),console.log(n),function(t){const e=document.getElementById("main"),n=document.createElement("h1");n.textContent="Lika i Ya",n.setAttribute("id","mainHeader"),e.appendChild(n)}(),function(){const t=document.getElementById("main"),e=document.createElement("div");e.setAttribute("id","mainDiv"),t.appendChild(e)}(),function(t){const e=document.querySelector("#projects-div"),n=Object.keys(t);Object.values(t),e.innerHTML="",n.forEach((t=>{const n=document.createElement("button");n.classList.add("projects-list-button"),n.textContent=t,e.appendChild(n)})),Object.keys(t).forEach((e=>{const n=t[e],o=document.createElement("div");o.innerHTML=`<strong>${e}:</strong> ${n.join(", ")}`,mainDiv.appendChild(o)}))}(n),document.querySelectorAll(".projects-list-button").forEach((t=>{t.addEventListener("click",(()=>{mainHeader.textContent=t.textContent}))}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,