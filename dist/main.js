(()=>{"use strict";const t=(t,e,n,o="important",i=!1)=>({id:Date.now(),title:t,desc:e,dueDate:n,priority:o,completed:i}),e="very important",n={default:[],home:[],work:[]},o=(t,e="default")=>(n[e].push(t),n);function i(t){document.querySelectorAll(".projects-list-button").forEach((e=>{e.addEventListener("click",(()=>{mainHeader.textContent=e.textContent,console.log(t[e.textContent]);const n=document.createElement("ul");t[e.textContent].forEach((t=>{const e=document.createElement("li");e.classList.add("li-element"),Object.keys(t).forEach((n=>{if("title"===n||"desc"===n||"dueDate"===n){const o=document.createElement("p");o.innerHTML=t[n],e.appendChild(o)}})),n.appendChild(e)})),mainDiv.innerHTML="",mainDiv.appendChild(n)}))}))}function d(t,e,n){let o=document.createElement(e);for(let t in n)n.hasOwnProperty(t)&&o.setAttribute(t,n[t]);return document.getElementById(t).appendChild(o),o}!function(){const t=document.createElement("button");t.setAttribute("id","new-ToDo-btn"),t.textContent="add",main.appendChild(t),t.addEventListener("click",(()=>{const t=document.createElement("div");t.setAttribute("id","input-Div"),main.appendChild(t),d("input-Div","form",{id:"input-form"}),d("input-form","label",{for:"title-input"}).textContent="Title",d("input-form","input",{type:"text",id:"title-input"}),d("input-form","label",{for:"desc-input"}).textContent="Description",d("input-form","textarea",{id:"desc-input",rows:"5"}),d("input-form","label",{for:"dueDate"}).textContent="Due date",d("input-form","input",{type:"date",id:"dueDate",required:!0}),d("input-form","label",{for:"priority"}).textContent="Priority",d("input-form","select",{id:"priority"}),d("priority","option",{value:"very"}).textContent="Very Important",d("priority","option",{value:"important"}).textContent="Important",d("priority","option",{value:"not"}).textContent="Not Important"}))}();const r=t("Milk","Buy some milk for the cat","12-02-2024",e),c=t("Writing","Write some text to my book","14-04-2024","not important",!0),u=t("Buy cat food","Buy some kitekat","04-05-2024",e);o(r),o(c),o(u),function(t){const e=document.getElementById("main"),n=document.createElement("h1");n.textContent="Lika i ya",n.setAttribute("id","mainHeader"),e.appendChild(n)}(),function(){const t=document.getElementById("main"),e=document.createElement("div");e.setAttribute("id","mainDiv"),t.appendChild(e)}(),function t(e){const o=document.querySelector("#projects-div"),d=Object.keys(e);o.innerHTML="";const r=document.createElement("h3");return r.textContent="Projects",o.appendChild(r),d.forEach((t=>{const e=document.createElement("button");e.classList.add("projects-list-button"),e.textContent=t,o.appendChild(e)})),function(e,o){const d=document.querySelector("#projects-div"),r=document.createElement("button");r.textContent="New project +",r.setAttribute("id","add-new-project-btn"),d.appendChild(r),r.addEventListener("click",(()=>{const e=document.createElement("form");e.classList.add("input-field");const c=document.createElement("input");c.setAttribute("type","text"),c.setAttribute("id","project-input"),c.setAttribute("maxlength","24"),c.setAttribute("placeholder","Enter project name"),c.setAttribute("autocomplete","off");const u=document.createElement("button");u.setAttribute("type","button"),u.setAttribute("id","add-project-btn"),u.textContent="Add";const a=document.createElement("button");a.setAttribute("type","button"),a.setAttribute("id","cancel-add-project-btn"),a.textContent="Cancel",e.appendChild(c),e.appendChild(u),e.appendChild(a),d.appendChild(e),r.setAttribute("disabled",!0),function(e){const o=document.getElementById("add-project-btn"),d=document.querySelector("#cancel-add-project-btn");o.addEventListener("click",(()=>{const o=document.getElementById("project-input").value;n[o]=[],console.table(n),t(e),i(e)})),d.addEventListener("click",(()=>{const t=document.querySelector(".input-field"),e=document.querySelector("#add-new-project-btn");t&&t.remove(),e.removeAttribute("disabled")}))}(o)}))}(0,e),o}(n),i(n)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,